#!/usr/bin/env node

var cli           = require('commander'),
    elasticsearch = require('elasticsearch')
    async         = require('async'),
    _             = require('underscore'),
    pace          = require('pace')(100),
    bunyan        = require('bunyan'),
    Indexer       = require('../lib/indexer'),
    URI           = require('URIjs');

var logger        = bunyan.createLogger({
  name: "elasticsearch-reindex",
  streams: [{
    path: "/var/log/elasticsearch-reindex.log"
  }]
});

cli
.version('1.0.2')
//.option('-x, --sync_settings', 'sync settings from source index')
//.option('-m, --sync_mapping', 'sync mappings from source index')
.option('-s, --src [value]', 'source index, eg. http://192.168.1.100:9200/{src_index}/{src_type}')
.option('-d, --dest [value]', 'destination index, eg. http://192.168.1.100:9200/{dest_index}/{dest_type}')
.option('-c, --concurrency [value]', 'concurrency for reindex', require('os').cpus().length)
.option('-b, --bulk [value]', 'bulk size for a thread', 100)
.parse(process.argv);

var src_uri      = new URI(cli.src),
    dest_uri     = new URI(cli.dest),
    src_client   = new elasticsearch.Client({host:src_uri.host()}),
    dest_client  = new elasticsearch.Client({host:dest_uri.host()}),
    src_path     = (function() { var tmp = src_uri.path().split('/'); return { index:tmp[1], type:tmp[2]}})(),
    dest_path    = (function() { var tmp = dest_uri.path().split('/'); return { index:tmp[1], type:tmp[2]}})(),
    dest_uri     = new URI(cli.dest),
    total        = processed_total = 0,
    custom_indexer = cli.args[0] ? require(cli.args[0]) : null;
    scan_options = {
      index       : src_path.index,
      type        : src_path.type,
      search_type : 'scan',
      scroll      : '1m',
      size        : cli.bulk
    };

var reindexer = new Indexer();

reindexer.on('error', function(err) {
  logger.warn(err);
});

reindexer.on('success', function(num_of_success) {
  processed_total += num_of_success;
  pace.op(processed_total);
});

src_client.search(scan_options, function scroll_fetch(err, res) {
  if (err) {
    return console.log(err);
  }
  pace.total = res.hits.total;
  total += res.hits.hits.length;
  reindexer.index(res.hits.hits, {
    concurrency : cli.concurrency,
    bulk        : cli.bulk,
    client      : dest_client,
    indexer     : custom_indexer.index || null,
    index       : dest_path.index,
    type        : dest_path.type
  }, function(err) {
    if (err) {
      return console.log(err);
    }
    if (res.hits.total !== total) {
      src_client.scroll({
        scrollId : res._scroll_id,
        scroll : '1m'
      }, scroll_fetch);
    } else {
      console.log('All done ' + total);
    }
  });
});
